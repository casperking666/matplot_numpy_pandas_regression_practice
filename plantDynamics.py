
from math import *


recoveryPVCoefficients=[[[[96.6977, -31.7123, -96.6977], [30.0175, -107.269, -30.0175], [6.63649, -776.397, -6.63649], [4.27941, -2309.53, -4.27941], [3.74668, -5421.31, -3.74668]], [[9.7114, -31.5764, -9.7114], [9.71139, -31.5764, -9.71139], [9.71136, -31.5765, -9.71136], [8.93219, -34.6707, -8.93219], [3.32973, -369.598, -3.32973]], [[0.97114, -31.5764, -0.97114], [0.97114, -31.5764, -0.97114], [0.97114, -31.5764, -0.97114], [0.971139, -31.5764, -0.971139], [0.971138, -31.5764, -0.971138]]], [[[4.95426, -270.38, -4.95426], [4.95426, -270.38, -4.95426], [4.95411, -270.388, -4.95411], [3.05464, -471.462, -3.05464], [1.19378, -7481.04, -1.19378]], [[0.495426, -270.38, -0.495426], [0.495426, -270.38, -0.495426], [0.495426, -270.38, -0.495426], [0.495426, -270.38, -0.495426], [0.495421, -270.384, -0.495421]], [[0.0495426, -270.38, -0.0495426], [0.0495426, -270.38, -0.0495426], [0.0495426, -270.38, -0.0495426], [0.0495426, -270.38, -0.0495426], [0.0495426, -270.38, -0.0495426]]], [[[152.857, -40.0347, -152.857], [11.299, -740.64, -11.299], [6.67308, -1806.25, -6.67308], [5.01809, -3955.59, -5.01809], [4.50076, -7583.33, -4.50076]], [[32.6283, -18.7555, -32.6283], [32.6261, -18.7567, -32.6261], [29.0571, -21.2005, -29.0571], [5.98245, -191.343, -5.98245], [4.06172, -1358.67, -4.06172]], [[3.26283, -18.7554, -3.26283], [3.26283, -18.7554, -3.26283], [3.26283, -18.7554, -3.26283], [3.26283, -18.7555, -3.26283], [3.11155, -20.0879, -3.11155]]], [[[91.677, -29.2359, -91.677], [34.4042, -80.7897, -34.4042], [6.80313, -655.111, -6.80313], [4.27036, -2103.85, -4.27036], [3.72534, -5422.65, -3.72534]], [[9.18215, -29.1899, -9.18215], [9.18215, -29.1899, -9.18215], [9.18212, -29.1899, -9.18212], [8.72066, -30.9184, -8.72066], [3.30463, -291.155, -3.30463]], [[0.918215, -29.1899, -0.918215], [0.918215, -29.1899, -0.918215], [0.918215, -29.1899, -0.918215], [0.918215, -29.1899, -0.918215], [0.918213, -29.1899, -0.918213]]], [[[65.2126, -98.2519, -65.2126], [18.2807, -370.92, -18.2807], [4.44192, -2380.55, -4.44192], [2.92544, -6377.58, -2.92544], [2.57426, -12757.1, -2.57426]], [[6.57258, -97.4846, -6.57258], [6.57258, -97.4846, -6.57258], [6.57257, -97.4848, -6.57257], [6.13632, -105.256, -6.13632], [2.29535, -1081.66, -2.29535]], [[0.657259, -97.4846, -0.657259], [0.657259, -97.4846, -0.657259], [0.657258, -97.4846, -0.657258], [0.657258, -97.4846, -0.657258], [0.657258, -97.4847, -0.657258]]], [[[25.1829, -129.196, -25.1829], [24.3756, -133.569, -24.3756], [6.78741, -558.555, -6.78741], [2.25073, -4179.09, -2.25073], [1.87503, -13497.3, -1.87503]], [[2.5183, -129.195, -2.5183], [2.5183, -129.195, -2.5183], [2.5183, -129.195, -2.5183], [2.51824, -129.199, -2.51824], [1.62188, -263.255, -1.62188]], [[0.25183, -129.195, -0.25183], [0.25183, -129.195, -0.25183], [0.25183, -129.195, -0.25183], [0.25183, -129.195, -0.25183], [0.25183, -129.195, -0.25183]]], [[[54.3913, -90.0306, -54.3913], [29.3675, -169.849, -29.3675], [4.99505, -1555.31, -4.99505], [2.93095, -5744.22, -2.93095], [2.5453, -16281.2, -2.5453]], [[5.44002, -90.0158, -5.44002], [5.44002, -90.0158, -5.44002], [5.44001, -90.0159, -5.44001], [5.40376, -90.6881, -5.40376], [2.25621, -546.064, -2.25621]], [[0.544002, -90.0158, -0.544002], [0.544002, -90.0158, -0.544002], [0.544002, -90.0158, -0.544002], [0.544002, -90.0158, -0.544002], [0.544002, -90.0159, -0.544002]]], [[[95.9421, -23.7645, -95.9421], [58.963, -39.1959, -58.963], [10.2949, -331.098, -10.2949], [5.72676, -1263.27, -5.72676], [4.93139, -3418.32, -4.93139]], [[9.59544, -23.7615, -9.59544], [9.59544, -23.7615, -9.59544], [9.59543, -23.7615, -9.59543], [9.57257, -23.8246, -9.57257], [4.34047, -109.36, -4.34047]], [[0.959544, -23.7615, -0.959544], [0.959544, -23.7615, -0.959544], [0.959544, -23.7615, -0.959544], [0.959544, -23.7615, -0.959544], [0.959544, -23.7615, -0.959544]]], [[[7.9267, -283.905, -7.9267], [7.92665, -283.907, -7.92665], [7.86939, -286.085, -7.86939], [2.2336, -1408.84, -2.2336], [1.22627, -14403., -1.22627]], [[0.79267, -283.905, -0.79267], [0.79267, -283.905, -0.79267], [0.79267, -283.905, -0.79267], [0.79267, -283.905, -0.79267], [0.791163, -284.68, -0.791163]], [[0.079267, -283.905, -0.079267], [0.079267, -283.905, -0.079267], [0.079267, -283.905, -0.079267], [0.079267, -283.905, -0.079267], [0.079267, -283.905, -0.079267]]], [[[71.0952, -16.0276, -71.0952], [62.901, -18.1663, -62.901], [13.7115, -104.615, -13.7115], [5.70256, -574.474, -5.70256], [4.78436, -1700.87, -4.78436]], [[7.10966, -16.0272, -7.10966], [7.10966, -16.0272, -7.10966], [7.10966, -16.0273, -7.10966], [7.10873, -16.0296, -7.10873], [4.14076, -39.8059, -4.14076]], [[0.710966, -16.0272, -0.710966], [0.710966, -16.0272, -0.710966], [0.710966, -16.0272, -0.710966], [0.710966, -16.0272, -0.710966], [0.710966, -16.0272, -0.710966]]], [[[23.2961, -105.215, -23.2961], [23.2901, -105.243, -23.2901], [16.2318, -154.622, -16.2318], [3.23605, -1755.09, -3.23605], [2.46711, -8266.54, -2.46711]], [[2.32961, -105.215, -2.32961], [2.32961, -105.215, -2.32961], [2.32961, -105.215, -2.32961], [2.32961, -105.216, -2.32961], [2.02827, -129.107, -2.02827]], [[0.232961, -105.215, -0.232961], [0.232961, -105.215, -0.232961], [0.232961, -105.215, -0.232961], [0.232961, -105.215, -0.232961], [0.232961, -105.215, -0.232961]]], [[[2.62352, -1285.12, -2.62352], [2.62352, -1285.12, -2.62352], [2.62348, -1285.14, -2.62348], [1.59674, -2275.94, -1.59674], [0.620901, -39507.7, -0.620901]], [[0.262352, -1285.12, -0.262352], [0.262352, -1285.12, -0.262352], [0.262352, -1285.12, -0.262352], [0.262352, -1285.12, -0.262352], [0.262351, -1285.13, -0.262351]], [[0.0262352, -1285.12, -0.0262352], [0.0262352, -1285.12, -0.0262352], [0.0262352, -1285.12, -0.0262352], [0.0262352, -1285.12, -0.0262352], [0.0262352, -1285.12, -0.0262352]]], [[[134.608, -34.6556, -134.608], [12.6996, -462.578, -12.6996], [6.79406, -1207.99, -6.79406], [4.98642, -2520.22, -4.98642], [4.45063, -4301.48, -4.45063]], [[21.3763, -21.8227, -21.3763], [21.3763, -21.8228, -21.3763], [21.3577, -21.8428, -21.3577], [8.71288, -63.9792, -8.71288], [3.99944, -851.034, -3.99944]], [[2.13764, -21.8227, -2.13764], [2.13764, -21.8227, -2.13764], [2.13764, -21.8227, -2.13764], [2.13763, -21.8227, -2.13763], [2.13703, -21.8315, -2.13703]]], [[[35.3496, -60.3889, -35.3496], [33.5801, -63.6431, -33.5801], [8.29064, -309.667, -8.29064], [2.94234, -2260.3, -2.94234], [2.45672, -8549.01, -2.45672]], [[3.53497, -60.3887, -3.53497], [3.53497, -60.3887, -3.53497], [3.53497, -60.3887, -3.53497], [3.53475, -60.3929, -3.53475], [2.13004, -139.971, -2.13004]], [[0.353497, -60.3887, -0.353497], [0.353497, -60.3887, -0.353497], [0.353497, -60.3887, -0.353497], [0.353497, -60.3887, -0.353497], [0.353497, -60.3887, -0.353497]]], [[[25.028, -57.0522, -25.028], [25.0266, -57.0555, -25.0266], [21.7046, -66.3337, -21.7046], [4.30621, -657.112, -4.30621], [3.01156, -4450.32, -3.01156]], [[2.5028, -57.0522, -2.5028], [2.5028, -57.0522, -2.5028], [2.5028, -57.0522, -2.5028], [2.5028, -57.0522, -2.5028], [2.35954, -62.1406, -2.35954]], [[0.25028, -57.0522, -0.25028], [0.25028, -57.0522, -0.25028], [0.25028, -57.0522, -0.25028], [0.25028, -57.0522, -0.25028], [0.25028, -57.0522, -0.25028]]], [[[16.7991, -149.568, -16.7991], [16.7966, -149.591, -16.7966], [12.6251, -202.616, -12.6251], [2.47594, -2260.59, -2.47594], [1.85186, -11490.4, -1.85186]], [[1.67991, -149.568, -1.67991], [1.67991, -149.568, -1.67991], [1.67991, -149.568, -1.67991], [1.67991, -149.568, -1.67991], [1.50587, -175.593, -1.50587]], [[0.167991, -149.568, -0.167991], [0.167991, -149.568, -0.167991], [0.167991, -149.568, -0.167991], [0.167991, -149.568, -0.167991], [0.167991, -149.568, -0.167991]]], [[[167.76, -35.8748, -167.76], [15.1287, -507.677, -15.1287], [7.86632, -1432.26, -7.86632], [5.75599, -3245.11, -5.75599], [5.13906, -6191.72, -5.13906]], [[25.1181, -23.9603, -25.1181], [25.118, -23.9604, -25.118], [25.0969, -23.9816, -25.0969], [10.047, -72.0331, -10.047], [4.62409, -1008.16, -4.62409]], [[2.51181, -23.9603, -2.51181], [2.51181, -23.9603, -2.51181], [2.51181, -23.9603, -2.51181], [2.51181, -23.9603, -2.51181], [2.51105, -23.9707, -2.51105]]], [[[112.167, -56.8456, -112.167], [9.74136, -845.17, -9.74136], [5.73653, -1918.09, -5.73653], [4.30895, -3672.37, -4.30895], [3.86407, -5797.52, -3.86407]], [[23.376, -27.2767, -23.376], [23.3756, -27.2772, -23.3756], [22.9875, -27.7628, -22.9875], [6.07527, -153.482, -6.07527], [3.48376, -1426.73, -3.48376]], [[2.3376, -27.2767, -2.3376], [2.3376, -27.2767, -2.3376], [2.3376, -27.2767, -2.3376], [2.3376, -27.2767, -2.3376], [2.32603, -27.4711, -2.32603]]], [[[107.688, -56.9928, -107.688], [10.8603, -698.764, -10.8603], [5.02964, -2325.41, -5.02964], [3.6102, -5787.94, -3.6102], [3.21399, -12434.8, -3.21399]], [[13.7304, -44.6997, -13.7304], [13.7304, -44.6998, -13.7304], [13.7281, -44.7075, -13.7281], [6.90953, -99.9037, -6.90953], [2.88829, -1571.63, -2.88829]], [[1.37304, -44.6997, -1.37304], [1.37304, -44.6997, -1.37304], [1.37304, -44.6997, -1.37304], [1.37304, -44.6997, -1.37304], [1.37295, -44.7039, -1.37295]]], [[[162.44, -21.9205, -162.44], [16.5015, -266.304, -16.5015], [7.8851, -829.705, -7.8851], [5.65928, -1961.07, -5.65928], [5.02974, -3891.19, -5.02974]], [[21.6002, -16.4848, -21.6002], [21.6002, -16.4849, -21.6002], [21.5948, -16.4892, -21.5948], [10.6578, -37.7648, -10.6578], [4.50901, -563.223, -4.50901]], [[2.16002, -16.4848, -2.16002], [2.16002, -16.4848, -2.16002], [2.16002, -16.4848, -2.16002], [2.16002, -16.4848, -2.16002], [2.15982, -16.4871, -2.15982]]]]
recoveryTimeToNextBoundaryCoefficients=[[[[0.0315335, 1.02145, -0.0105633], [0.00932239, 1.10646, -0.0368606], [0.001288, 1.86904, -0.281631], [0.000432989, 4.6109, -1.07746], [1000., 1., 1.]], [[0.0316693, 1.02145, -0.105181], [0.0316693, 1.05374, -0.108506], [0.0316691, 1.11235, -0.114541], [0.0288428, 1.44477, -0.161749], [1000., 1., 1.]], [[0.0316693, 1.02145, -1.05181], [0.0316693, 1.05374, -1.08506], [0.0316693, 1.11235, -1.1454], [0.0316693, 1.43062, -1.47313], [1000., 1., 1.]]], [[[0.0036985, 1.02145, -0.206176], [0.0036985, 1.05374, -0.212694], [0.00369838, 1.11235, -0.22453], [0.00212106, 1.53807, -0.50352], [1000., 1., 1.]], [[0.0036985, 1.02145, -2.06176], [0.0036985, 1.05374, -2.12694], [0.0036985, 1.11235, -2.24523], [0.0036985, 1.43062, -2.88765], [1000., 1., 1.]], [[0.0036985, 1.02145, -20.6176], [0.0036985, 1.05374, -21.2694], [0.0036985, 1.11235, -22.4523], [0.0036985, 1.43062, -28.8765], [1000., 1., 1.]]], [[[0.0249783, 1.02145, -0.0066824], [0.00135018, 1.44099, -0.127532], [0.000553632, 2.19091, -0.32832], [0.000252806, 4.64035, -0.924725], [1000., 1., 1.]], [[0.0533178, 1.02145, -0.0313057], [0.0533142, 1.05374, -0.0322975], [0.0471687, 1.11974, -0.0385358], [0.00522621, 2.67604, -0.447315], [1000., 1., 1.]], [[0.0533178, 1.02145, -0.313057], [0.0533178, 1.05374, -0.322953], [0.0533178, 1.11235, -0.340915], [0.0533177, 1.43062, -0.438459], [1000., 1., 1.]]], [[[0.0342046, 1.02145, -0.0111418], [0.0123778, 1.09276, -0.0317624], [0.00152646, 1.84964, -0.271881], [0.00047532, 4.7954, -1.12295], [1000., 1., 1.]], [[0.0342585, 1.02145, -0.111243], [0.0342585, 1.05374, -0.11476], [0.0342584, 1.11235, -0.121143], [0.0323432, 1.43917, -0.16503], [1000., 1., 1.]], [[0.0342585, 1.02145, -1.11243], [0.0342585, 1.05374, -1.1476], [0.0342585, 1.11235, -1.21142], [0.0342585, 1.43062, -1.55804], [1000., 1., 1.]]], [[[0.0101779, 1.02145, -0.0156634], [0.002696, 1.11515, -0.0610016], [0.00042007, 1.83576, -0.413282], [0.000156799, 4.16579, -1.42399], [1000., 1., 1.]], [[0.010258, 1.02145, -0.155411], [0.010258, 1.05374, -0.160324], [0.010258, 1.11235, -0.169241], [0.00950065, 1.44213, -0.235016], [1000., 1., 1.]], [[0.010258, 1.02145, -1.55411], [0.010258, 1.05374, -1.60324], [0.010258, 1.11235, -1.6924], [0.010258, 1.43062, -2.17664], [1000., 1., 1.]]], [[[0.00774021, 1.02145, -0.0405612], [0.00748675, 1.05449, -0.04326], [0.00179033, 1.29615, -0.190965], [0.000239286, 4.13594, -1.8376], [1000., 1., 1.]], [[0.00774024, 1.02145, -0.40561], [0.00774024, 1.05374, -0.418433], [0.00774024, 1.11235, -0.441705], [0.00774002, 1.43062, -0.568103], [1000., 1., 1.]], [[0.00774024, 1.02145, -4.0561], [0.00774024, 1.05374, -4.18433], [0.00774024, 1.11235, -4.41705], [0.00774024, 1.43062, -5.68087], [1000., 1., 1.]]], [[[0.0111073, 1.02145, -0.0187797], [0.00588757, 1.07336, -0.0365492], [0.000642959, 1.76473, -0.353295], [0.000174088, 4.91862, -1.67817], [1000., 1., 1.]], [[0.0111092, 1.02145, -0.187766], [0.0111092, 1.05374, -0.193702], [0.0111091, 1.11235, -0.204475], [0.0110268, 1.43169, -0.264944], [1000., 1., 1.]], [[0.0111092, 1.02145, -1.87766], [0.0111092, 1.05374, -1.93702], [0.0111092, 1.11235, -2.04475], [0.0111092, 1.43062, -2.6298], [1000., 1., 1.]]], [[[0.0420795, 1.02145, -0.0106465], [0.0255128, 1.06811, -0.0181149], [0.00302026, 1.66296, -0.161532], [0.000791596, 4.5393, -0.792648], [1000., 1., 1.]], [[0.0420849, 1.02145, -0.106452], [0.0420849, 1.05374, -0.109817], [0.0420849, 1.11235, -0.115925], [0.0419733, 1.431, -0.149489], [1000., 1., 1.]], [[0.0420849, 1.02145, -1.06452], [0.0420849, 1.05374, -1.09817], [0.0420849, 1.11235, -1.15925], [0.0420849, 1.43062, -1.49093], [1000., 1., 1.]]], [[[0.0035223, 1.02145, -0.128862], [0.00352228, 1.05374, -0.132937], [0.00349547, 1.11278, -0.141406], [0.000709803, 2.00044, -0.895611], [1000., 1., 1.]], [[0.0035223, 1.02145, -1.28862], [0.0035223, 1.05374, -1.32936], [0.0035223, 1.11235, -1.40329], [0.0035223, 1.43062, -1.80481], [1000., 1., 1.]], [[0.0035223, 1.02145, -12.8862], [0.0035223, 1.05374, -13.2936], [0.0035223, 1.11235, -14.0329], [0.0035223, 1.43062, -18.0481], [1000., 1., 1.]]], [[[0.0623925, 1.02145, -0.0143674], [0.0550471, 1.05669, -0.0167993], [0.0095589, 1.40026, -0.102123], [0.00174072, 4.11296, -0.721249], [1000., 1., 1.]], [[0.0623938, 1.02145, -0.143671], [0.0623938, 1.05374, -0.148213], [0.0623937, 1.11235, -0.156456], [0.0623846, 1.43064, -0.201251], [1000., 1., 1.]], [[0.0623938, 1.02145, -1.43671], [0.0623938, 1.05374, -1.48212], [0.0623938, 1.11235, -1.56456], [0.0623938, 1.43062, -2.01221], [1000., 1., 1.]]], [[[0.00950432, 1.02145, -0.0438464], [0.00950182, 1.05375, -0.0452443], [0.0064674, 1.13897, -0.0701694], [0.000569771, 3.31494, -1.02438], [1000., 1., 1.]], [[0.00950432, 1.02145, -0.438464], [0.00950432, 1.05374, -0.452325], [0.00950432, 1.11235, -0.477482], [0.0095043, 1.43062, -0.614101], [1000., 1., 1.]], [[0.00950432, 1.02145, -4.38464], [0.00950432, 1.05374, -4.52325], [0.00950432, 1.11235, -4.77482], [0.00950432, 1.43062, -6.141], [1000., 1., 1.]]], [[[0.00077814, 1.02145, -0.389343], [0.00077814, 1.05374, -0.401651], [0.000778125, 1.11235, -0.423998], [0.000439379, 1.54202, -0.965731], [1000., 1., 1.]], [[0.00077814, 1.02145, -3.89343], [0.00077814, 1.05374, -4.01651], [0.00077814, 1.11235, -4.2399], [0.00077814, 1.43062, -5.45303], [1000., 1., 1.]], [[0.00077814, 1.02145, -38.9343], [0.00077814, 1.05374, -40.1651], [0.00077814, 1.11235, -42.399], [0.00077814, 1.43062, -54.5303], [1000., 1., 1.]]], [[[0.0288554, 1.02145, -0.00758836], [0.0021618, 1.32698, -0.10449], [0.000827823, 1.957, -0.288045], [0.000396791, 3.85396, -0.772892], [1000., 1., 1.]], [[0.0458238, 1.02145, -0.0477841], [0.0458236, 1.05374, -0.0492949], [0.0457817, 1.1124, -0.0520842], [0.0156301, 1.70955, -0.196209], [1000., 1., 1.]], [[0.0458238, 1.02145, -0.477841], [0.0458238, 1.05374, -0.492947], [0.0458238, 1.11235, -0.520363], [0.0458238, 1.43062, -0.669251], [1000., 1., 1.]]], [[[0.0165593, 1.02145, -0.0288957], [0.0157126, 1.05493, -0.0314155], [0.00322928, 1.33777, -0.161359], [0.00044242, 4.45697, -1.51477], [1000., 1., 1.]], [[0.0165594, 1.02145, -0.288956], [0.0165594, 1.05374, -0.29809], [0.0165594, 1.11235, -0.314669], [0.0165582, 1.43063, -0.404731], [1000., 1., 1.]], [[0.0165594, 1.02145, -2.88956], [0.0165594, 1.05374, -2.9809], [0.0165594, 1.11235, -3.14669], [0.0165594, 1.43062, -4.04703], [1000., 1., 1.]]], [[[0.0175278, 1.02145, -0.0408123], [0.0175268, 1.05374, -0.0421049], [0.0150753, 1.12157, -0.0516744], [0.00152181, 2.83504, -0.65836], [1000., 1., 1.]], [[0.0175278, 1.02145, -0.408123], [0.0175278, 1.05374, -0.421025], [0.0175278, 1.11235, -0.444441], [0.0175278, 1.43062, -0.571607], [1000., 1., 1.]], [[0.0175278, 1.02145, -4.08123], [0.0175278, 1.05374, -4.21025], [0.0175278, 1.11235, -4.44441], [0.0175278, 1.43062, -5.71606], [1000., 1., 1.]]], [[[0.00668592, 1.02145, -0.0608039], [0.00668489, 1.05374, -0.0627357], [0.00493545, 1.13246, -0.0896993], [0.000442362, 3.18685, -1.28713], [1000., 1., 1.]], [[0.00668593, 1.02145, -0.608039], [0.00668593, 1.05374, -0.627261], [0.00668593, 1.11235, -0.662147], [0.00668592, 1.43062, -0.851604], [1000., 1., 1.]], [[0.00668593, 1.02145, -6.08039], [0.00668593, 1.05374, -6.27261], [0.00668593, 1.11235, -6.62147], [0.00668593, 1.43062, -8.51603], [1000., 1., 1.]]], [[[0.0278747, 1.02145, -0.00608875], [0.00196976, 1.34476, -0.0888879], [0.000698198, 2.08235, -0.264718], [0.000308156, 4.44011, -0.771389], [1000., 1., 1.]], [[0.0417357, 1.02145, -0.0406659], [0.0417356, 1.05374, -0.0419516], [0.0416987, 1.1124, -0.0443241], [0.0138825, 1.72033, -0.171228], [1000., 1., 1.]], [[0.0417357, 1.02145, -0.406659], [0.0417357, 1.05374, -0.419515], [0.0417357, 1.11235, -0.442847], [0.0417357, 1.43062, -0.569556], [1000., 1., 1.]]], [[[0.0175915, 1.02145, -0.00910653], [0.00118319, 1.36062, -0.139674], [0.000521351, 1.91954, -0.334617], [0.000272304, 3.55041, -0.823962], [1000., 1., 1.]], [[0.0366613, 1.02145, -0.0436966], [0.0366607, 1.05374, -0.0450787], [0.0360194, 1.11336, -0.0484331], [0.00651542, 2.09211, -0.344365], [1000., 1., 1.]], [[0.0366613, 1.02145, -0.436966], [0.0366613, 1.05374, -0.450779], [0.0366613, 1.11235, -0.47585], [0.0366613, 1.43062, -0.612002], [1000., 1., 1.]]], [[[0.0175461, 1.02145, -0.00948528], [0.0014311, 1.30292, -0.119971], [0.000430031, 2.11977, -0.421456], [0.000172773, 4.87069, -1.34915], [1000., 1., 1.]], [[0.0223715, 1.02145, -0.0743934], [0.0223715, 1.05374, -0.0767453], [0.0223676, 1.11236, -0.0810276], [0.0100096, 1.60903, -0.232872], [1000., 1., 1.]], [[0.0223715, 1.02145, -0.743934], [0.0223715, 1.05374, -0.767452], [0.0223715, 1.11235, -0.810135], [0.0223715, 1.43062, -1.04193], [1000., 1., 1.]]], [[[0.0456194, 1.02145, -0.00628817], [0.0037551, 1.30044, -0.0788078], [0.00120525, 2.04375, -0.259192], [0.000509926, 4.45897, -0.787903], [1000., 1., 1.]], [[0.0606618, 1.02145, -0.0472889], [0.0606617, 1.05374, -0.0487839], [0.0606458, 1.11236, -0.0515106], [0.0264797, 1.61709, -0.151729], [1000., 1., 1.]], [[0.0606618, 1.02145, -0.472888], [0.0606618, 1.05374, -0.487838], [0.0606618, 1.11235, -0.51497], [0.0606618, 1.43062, -0.662315], [1000., 1., 1.]]]]
recoveryVoltageLimits=[[[[0., 2.03065], [2.03065, 2.88827], [2.88827, 3.08575], [3.08575, 3.3513], [3.3513, 3.74668]], [[0., 0.203939], [0.203939, 0.495281], [0.495281, 0.980849], [0.980849, 2.74978], [2.74978, 3.32973]], [[0., 0.0203939], [0.0203939, 0.0495281], [0.0495281, 0.0980851], [0.0980851, 0.292313], [0.292313, 0.971138]]], [[[0., 0.104039], [0.104039, 0.252667], [0.252667, 0.500372], [0.500372, 1.06862], [1.06862, 1.19378]], [[0., 0.0104039], [0.0104039, 0.0252667], [0.0252667, 0.050038], [0.050038, 0.149123], [0.149123, 0.495421]], [[0., 0.00104039], [0.00104039, 0.00252667], [0.00252667, 0.0050038], [0.0050038, 0.0149123], [0.0149123, 0.0495426]]], [[[0., 3.21], [3.21, 3.45787], [3.45787, 3.62727], [3.62727, 3.93669], [3.93669, 4.50076]], [[0., 0.685194], [0.685194, 1.66398], [1.66398, 3.10724], [3.10724, 3.74689], [3.74689, 4.06172]], [[0., 0.0685194], [0.0685194, 0.166404], [0.166404, 0.329546], [0.329546, 0.982111], [0.982111, 3.11155]]], [[[0., 1.92522], [1.92522, 2.92049], [2.92049, 3.12505], [3.12505, 3.37985], [3.37985, 3.72534]], [[0., 0.192825], [0.192825, 0.468289], [0.468289, 0.927395], [0.927395, 2.66116], [2.66116, 3.30463]], [[0., 0.0192825], [0.0192825, 0.046829], [0.046829, 0.0927397], [0.0927397, 0.276383], [0.276383, 0.918213]]], [[[0., 1.36946], [1.36946, 1.88768], [1.88768, 2.02226], [2.02226, 2.22319], [2.22319, 2.57426]], [[0., 0.138024], [0.138024, 0.335202], [0.335202, 0.66383], [0.66383, 1.88129], [1.88129, 2.29535]], [[0., 0.0138024], [0.0138024, 0.0335202], [0.0335202, 0.0663831], [0.0663831, 0.197835], [0.197835, 0.657258]]], [[[0., 0.528842], [0.528842, 1.25959], [1.25959, 1.55084], [1.55084, 1.70654], [1.70654, 1.87503]], [[0., 0.0528844], [0.0528844, 0.128434], [0.128434, 0.254349], [0.254349, 0.757995], [0.757995, 1.62188]], [[0., 0.00528844], [0.00528844, 0.0128434], [0.0128434, 0.0254349], [0.0254349, 0.075801], [0.075801, 0.25183]]], [[[0., 1.14222], [1.14222, 2.00714], [2.00714, 2.16456], [2.16456, 2.33506], [2.33506, 2.5453]], [[0., 0.11424], [0.11424, 0.277441], [0.277441, 0.549442], [0.549442, 1.62938], [1.62938, 2.25621]], [[0., 0.011424], [0.011424, 0.0277441], [0.0277441, 0.0549442], [0.0549442, 0.163745], [0.163745, 0.544002]]], [[[0., 2.01478], [2.01478, 3.75988], [3.75988, 4.10419], [4.10419, 4.46516], [4.46516, 4.93139]], [[0., 0.201504], [0.201504, 0.489368], [0.489368, 0.969139], [0.969139, 2.88314], [2.88314, 4.34047]], [[0., 0.0201504], [0.0201504, 0.0489368], [0.0489368, 0.096914], [0.096914, 0.288823], [0.288823, 0.959544]]], [[[0., 0.166461], [0.166461, 0.40426], [0.40426, 0.797576], [0.797576, 1.11705], [1.11705, 1.22627]], [[0., 0.0166461], [0.0166461, 0.0404262], [0.0404262, 0.0800597], [0.0800597, 0.238594], [0.238594, 0.791163]], [[0., 0.00166461], [0.00166461, 0.00404262], [0.00404262, 0.00800597], [0.00800597, 0.0238594], [0.0238594, 0.079267]]], [[[0., 1.493], [1.493, 3.37476], [3.37476, 3.91937], [3.91937, 4.31607], [4.31607, 4.78436]], [[0., 0.149303], [0.149303, 0.362593], [0.362593, 0.718076], [0.718076, 2.1398], [2.1398, 4.14076]], [[0., 0.0149303], [0.0149303, 0.0362593], [0.0362593, 0.0718076], [0.0718076, 0.214001], [0.214001, 0.710966]]], [[[0., 0.489218], [0.489218, 1.18792], [1.18792, 1.98053], [1.98053, 2.25985], [2.25985, 2.46711]], [[0., 0.0489219], [0.0489219, 0.11881], [0.11881, 0.235291], [0.235291, 0.701212], [0.701212, 2.02827]], [[0., 0.00489219], [0.00489219, 0.011881], [0.011881, 0.0235291], [0.0235291, 0.0701213], [0.0701213, 0.232961]]], [[[0., 0.055094], [0.055094, 0.1338], [0.1338, 0.264973], [0.264973, 0.56125], [0.56125, 0.620901]], [[0., 0.0055094], [0.0055094, 0.01338], [0.01338, 0.0264976], [0.0264976, 0.0789681], [0.0789681, 0.262351]], [[0., 0.00055094], [0.00055094, 0.001338], [0.001338, 0.00264976], [0.00264976, 0.00789681], [0.00789681, 0.0262352]]], [[[0., 2.82676], [2.82676, 3.1293], [3.1293, 3.32238], [3.32238, 3.69258], [3.69258, 4.45063]], [[0., 0.448903], [0.448903, 1.09019], [1.09019, 2.15803], [2.15803, 3.61628], [3.61628, 3.99944]], [[0., 0.0448903], [0.0448903, 0.109019], [0.109019, 0.215901], [0.215901, 0.643428], [0.643428, 2.13703]]], [[[0., 0.742341], [0.742341, 1.7486], [1.7486, 2.09328], [2.09328, 2.28217], [2.28217, 2.45672]], [[0., 0.0742344], [0.0742344, 0.180284], [0.180284, 0.357032], [0.357032, 1.06398], [1.06398, 2.13004]], [[0., 0.00742344], [0.00742344, 0.0180284], [0.0180284, 0.0357032], [0.0357032, 0.106403], [0.106403, 0.353497]]], [[[0., 0.525588], [0.525588, 1.27638], [1.27638, 2.35269], [2.35269, 2.78729], [2.78729, 3.01156]], [[0., 0.0525588], [0.0525588, 0.127643], [0.127643, 0.252783], [0.252783, 0.753342], [0.753342, 2.35954]], [[0., 0.00525588], [0.00525588, 0.0127643], [0.0127643, 0.0252783], [0.0252783, 0.0753343], [0.0753343, 0.25028]]], [[[0., 0.352781], [0.352781, 0.856676], [0.856676, 1.47672], [1.47672, 1.69901], [1.69901, 1.85186]], [[0., 0.0352781], [0.0352781, 0.0856754], [0.0856754, 0.169671], [0.169671, 0.505652], [0.505652, 1.50587]], [[0., 0.00352781], [0.00352781, 0.00856754], [0.00856754, 0.0169671], [0.0169671, 0.0505653], [0.0505653, 0.167991]]], [[[0., 3.52297], [3.52297, 3.87861], [3.87861, 4.08871], [4.08871, 4.45963], [4.45963, 5.13906]], [[0., 0.52748], [0.52748, 1.28102], [1.28102, 2.53581], [2.53581, 4.20681], [4.20681, 4.62409]], [[0., 0.052748], [0.052748, 0.128102], [0.128102, 0.253693], [0.253693, 0.756054], [0.756054, 2.51105]]], [[[0., 2.3555], [2.3555, 2.58183], [2.58183, 2.74804], [2.74804, 3.0953], [3.0953, 3.86407]], [[0., 0.490896], [0.490896, 1.19216], [1.19216, 2.3405], [2.3405, 3.17137], [3.17137, 3.48376]], [[0., 0.0490896], [0.0490896, 0.119218], [0.119218, 0.236097], [0.236097, 0.703617], [0.703617, 2.32603]]], [[[0., 2.26145], [2.26145, 2.52495], [2.52495, 2.65691], [2.65691, 2.86899], [2.86899, 3.21399]], [[0., 0.288338], [0.288338, 0.700249], [0.700249, 1.38665], [1.38665, 2.61532], [2.61532, 2.88829]], [[0., 0.0288338], [0.0288338, 0.070025], [0.070025, 0.138677], [0.138677, 0.413285], [0.413285, 1.37295]]], [[[0., 3.41124], [3.41124, 3.81237], [3.81237, 4.02695], [4.02695, 4.39009], [4.39009, 5.02974]], [[0., 0.453605], [0.453605, 1.10161], [1.10161, 2.18134], [2.18134, 4.06709], [4.06709, 4.50901]], [[0., 0.0453605], [0.0453605, 0.110161], [0.110161, 0.218162], [0.218162, 0.650167], [0.650167, 2.15982]]]]
energizeVoltageEquations=[[[7546.36, 0.36817], [7546.36, 0.0323453], [7546.36, 0.00203178]], [[7546.36, 0.14952], [7546.36, 0.00887542], [7546.36, 0.000887535]], [[7546.36, 0.730203], [7546.36, 0.0724975], [7546.36, 0.0042207]], [[7546.36, 0.324592], [7546.36, 0.0280086], [7546.36, 0.00177586]], [[7546.36, 0.751624], [7546.36, 0.0673277], [7546.36, 0.00424527]], [[7546.36, 0.389813], [7546.36, 0.0284777], [7546.36, 0.00215569]], [[7546.36, 0.596068], [7546.36, 0.0496339], [7546.36, 0.00324453]], [[7546.36, 0.274637], [7546.36, 0.0225588], [7546.36, 0.00151068]], [[7546.36, 0.261581], [7546.36, 0.0149353], [7546.36, 0.00149107]], [[7546.36, 0.136103], [7546.36, 0.0103773], [7546.36, 0.000754988]], [[7546.36, 0.29128], [7546.36, 0.0181247], [7546.36, 0.00162403]], [[7546.36, 0.378626], [7546.36, 0.0223389], [7546.36, 0.00223388]], [[7546.36, 0.535985], [7546.36, 0.0533565], [7546.36, 0.00309155]], [[7546.36, 0.259608], [7546.36, 0.019213], [7546.36, 0.00141441]], [[7546.36, 0.169775], [7546.36, 0.00994281], [7546.36, 0.000946086]], [[7546.36, 0.298374], [7546.36, 0.0181934], [7546.36, 0.00166478]], [[7546.36, 0.712695], [7546.36, 0.0691405], [7546.36, 0.00398861]], [[7546.36, 0.716695], [7546.36, 0.0742504], [7546.36, 0.00424278]], [[7546.36, 0.740016], [7546.36, 0.0696601], [7546.36, 0.00406671]], [[7546.36, 0.422856], [7546.36, 0.0403611], [7546.36, 0.00235944]]]
energizeCurrentEquations=[[[0.0277835, -0.0277835, 7546.36, 0.0754636], [0.00244089, -0.00244089, 7546.36, 0.0754636], [0.000153325, -0.000153325, 7546.36, 0.0754636]], [[0.0112834, -0.0112834, 7546.36, 0.0754636], [0.000669772, -0.000669772, 7546.36, 0.0754636], [0.0000669766, -0.0000669766, 7546.36, 0.0754636]], [[0.0551038, -0.0551038, 7546.36, 0.0754636], [0.00547092, -0.00547092, 7546.36, 0.0754636], [0.000318509, -0.000318509, 7546.36, 0.0754636]], [[0.0244949, -0.0244949, 7546.36, 0.0754636], [0.00211363, -0.00211363, 7546.36, 0.0754636], [0.000134013, -0.000134013, 7546.36, 0.0754636]], [[0.0567203, -0.0567203, 7546.36, 0.0754636], [0.0050808, -0.0050808, 7546.36, 0.0754636], [0.000320363, -0.000320363, 7546.36, 0.0754636]], [[0.0294167, -0.0294167, 7546.36, 0.0754636], [0.00214903, -0.00214903, 7546.36, 0.0754636], [0.000162676, -0.000162676, 7546.36, 0.0754636]], [[0.0449814, -0.0449814, 7546.36, 0.0754636], [0.00374556, -0.00374556, 7546.36, 0.0754636], [0.000244844, -0.000244844, 7546.36, 0.0754636]], [[0.0207251, -0.0207251, 7546.36, 0.0754636], [0.00170237, -0.00170237, 7546.36, 0.0754636], [0.000114001, -0.000114001, 7546.36, 0.0754636]], [[0.0197399, -0.0197399, 7546.36, 0.0754636], [0.00112707, -0.00112707, 7546.36, 0.0754636], [0.000112522, -0.000112522, 7546.36, 0.0754636]], [[0.0102708, -0.0102708, 7546.36, 0.0754636], [0.000783113, -0.000783113, 7546.36, 0.0754636], [0.0000569742, -0.0000569742, 7546.36, 0.0754636]], [[0.0219811, -0.0219811, 7546.36, 0.0754636], [0.00136776, -0.00136776, 7546.36, 0.0754636], [0.000122555, -0.000122555, 7546.36, 0.0754636]], [[0.0285725, -0.0285725, 7546.36, 0.0754636], [0.00168578, -0.00168578, 7546.36, 0.0754636], [0.000168577, -0.000168577, 7546.36, 0.0754636]], [[0.0404473, -0.0404473, 7546.36, 0.0754636], [0.00402647, -0.00402647, 7546.36, 0.0754636], [0.000233299, -0.000233299, 7546.36, 0.0754636]], [[0.019591, -0.019591, 7546.36, 0.0754636], [0.00144988, -0.00144988, 7546.36, 0.0754636], [0.000106736, -0.000106736, 7546.36, 0.0754636]], [[0.0128118, -0.0128118, 7546.36, 0.0754636], [0.000750321, -0.000750321, 7546.36, 0.0754636], [0.0000713951, -0.0000713951, 7546.36, 0.0754636]], [[0.0225164, -0.0225164, 7546.36, 0.0754636], [0.00137294, -0.00137294, 7546.36, 0.0754636], [0.00012563, -0.00012563, 7546.36, 0.0754636]], [[0.0537826, -0.0537826, 7546.36, 0.0754636], [0.0052176, -0.0052176, 7546.36, 0.0754636], [0.000300995, -0.000300995, 7546.36, 0.0754636]], [[0.0540844, -0.0540844, 7546.36, 0.0754636], [0.0056032, -0.0056032, 7546.36, 0.0754636], [0.000320176, -0.000320176, 7546.36, 0.0754636]], [[0.0558443, -0.0558443, 7546.36, 0.0754636], [0.0052568, -0.0052568, 7546.36, 0.0754636], [0.000306889, -0.000306889, 7546.36, 0.0754636]], [[0.0319102, -0.0319102, 7546.36, 0.0754636], [0.0030458, -0.0030458, 7546.36, 0.0754636], [0.000178052, -0.000178052, 7546.36, 0.0754636]]]


DEFAULT_RUN_TIME = 3e6

PRE_ENERGISE_CLOCKS = 8
CIRCULATE_CLOCKS = 8


LOWER_VOLTAGE_LIMIT =  0.02

SET_TPERIOD_DIVIDE = 16

DEENERGISE_OFFSET = 9

CLOCK_PERIOD = 500e-9
TPERIOD_MULTIPLIER = 16

NUMBER_OF_CHANNELS = 1
MAX_NUMBER_OF_CHANNELS = 4
NUMBER_ACTIVE_ADAPTORS = (MAX_NUMBER_OF_CHANNELS + 3)


LOAD_COMP = 1894 # 1.85 << STORE_VOLTAGE_BIT_SHIFT
INTERNAL_COMP = 1843 # 1.8 << STORE_VOLTAGE_BIT_SHIFT

inductanceSlow = 1.756e-3
inductanceFast =  111e-9

LOAD_CAPACITOR = 220e-6
LOAD_ON_CURRENT = 25e-3
LOAD_OFF_CURRENT = 100e-5
LOAD_DUTY_CYCLE = 0.5
LOAD_PERIOD = 1e6 #2s

INTERNAL_ON_CURRENT = 100e-6
INTERNAL_OFF_CURRENT = 100e-6
INTERNAL_DUTY_CYCLE = 0
INTERNAL_PERIOD = 4e6 #2s

LEAKAGE_CURRENT_LOAD = 0
LEAKAGE_CURRENT_INTERNAL = 100e-6

STORE_ON_CURRENT = 0
STORE_OFF_CURRENT = 0
STORE_DUTY_CYCLE = 0
STORE_PERIOD = 4e6 #2s
OVER_CURRENT = 250e-3

gStoreComparatorVoltages = [1024, 1229, 1434, 1638, 1843, 2048, 2253, 2458, 2662, 2867, 3072, 3277,
                         3482, 3686, 3891, 4096, 4301, 4506, 4710, 4915, 5120, 5325, 5530, 5632]


STORE_COMP_PHASE_2_TO_PHASE_3_INDEX = 23
STORE_COMP_PHASE_3_TO_PHASE_2_INDEX = 0


def enum(*sequential, **named):
    enums = dict(zip(sequential, range(len(sequential))), **named)
    return type('Enum', (), enums)

HarvesterType_t = enum("UNKNOWN",
                       "THEVENIN",
                       "PV",
                       "AC",
                       "PZ",
                       "ED")


class testInputs_class:

    def __init__(self,testHarvesterType,
                 channelUsedNVM,
                 testStartingACPeriod,
                 testStartingVoltage,
                 testCapacitorSize,
                 testOpenSourceVoltage,
                 testResistance,
                 testFrequency,
                 mechanicalPeriod,
                 pvSpecIndices,
                 printVoltages,
                 startRunTime,
                 endRunTime,
                 loadDefined,
                 loadOnCurrent,
                 loadOffCurrent,
                 loadPeriod,
                 loadDutyCycle,
                 argumentDefinedTestNumber,
                 ACDeterminedTimeStamp):

        self.testHarvesterType = testHarvesterType
        self.channelUsedNVM = channelUsedNVM
        self.testStartingACPeriod = testStartingACPeriod
        self.testStartingVoltage = testStartingVoltage
        self.testCapacitorSize = testCapacitorSize
        self.testOpenSourceVoltage = testOpenSourceVoltage
        self.testResistance = testResistance
        self.testFrequency = testFrequency
        self.mechanicalPeriod = mechanicalPeriod
        self.pvSpecIndices = pvSpecIndices
        self.printVoltages = printVoltages
        self.startRunTime = startRunTime
        self.endRunTime = endRunTime
        self.loadDefined = loadDefined
        self.loadOnCurrent = loadOnCurrent
        self.loadOffCurrent = loadOffCurrent
        self.loadPeriod = loadPeriod
        self.loadDutyCycle = loadDutyCycle
        self.argumentDefinedTestNumber = argumentDefinedTestNumber
        self.ACDeterminedTimeStamp = ACDeterminedTimeStamp




class plantDynamics_class:

    def __init__(self,
        channelNumber,
        voltage,
        capacitance,
        energiseClocks,
        periodClocks,
        eGearFast,
        dGearFast,
        lastEnergizeEndClock):

        self.channelNumber = channelNumber
        self.voltage = voltage
        self.capacitance = capacitance
        self.energiseClocks = energiseClocks
        self.periodClocks = periodClocks
        self.eGearFast = eGearFast
        self.dGearFast = dGearFast
        self.inductorCurrent = 0
        self.lastEnergizeStartClock = 0
        self.lastEnergizeEndClock = lastEnergizeEndClock
        self.energiseEarlyTerminationClock = 0
        self.overCurrentFlag = False
        self.earlyGroundingFlag = False

    def GeneralFormUnderDampedEquation(b1, b2, omegaD, alpha, time):
        val = b1 * exp(-alpha * time) * cos(omegaD * time) + b2 * exp(-alpha * time) * sin(omegaD * time)
        return val

    def f_mod(a, n):
        return a - n * floor(a / n)


class inputChannel_class(plantDynamics_class):

    def __init__(self,
        channelNumber, # 1
        voltage, # vin starting voltage
        capacitance, # cin 10mf dc
        energiseClocks, # tE 2mhz, 500ns/period, equivalent to 1, so 2 would be 1000ns
        periodClocks, # tPeriod
        eGearFast, # 0
        dGearFast, # 0
        lastEnergizeEndClock, # 0, timestamp of the bottom point
        channelType, # thevein
        vOpenSource, # Vops
        resistance, # Rin
        frequency, # 0 relate to ac
        illuminationLevel=0,
        noOfCells=0):

        plantDynamics_class.__init__(self,
        channelNumber,
        voltage,
        capacitance,
        energiseClocks,
        periodClocks,
        eGearFast,
        dGearFast,
        lastEnergizeEndClock,
        )

        self.channelType = channelType
        self.vOpenSource = vOpenSource
        self.resistance = resistance
        self.frequency = frequency
        self.noOfCells = noOfCells
        self.illuminationLevel = illuminationLevel


        #PV variables

        self.voltageEquationCoefficients = [None for j in range(2) ]
        self.currentEquationCoefficients = [None for j in range(4) ]
        self.odeCoefficients = [ [ None for j in range(3) ] for i in range(5) ]
        self.timeToNextRegionCoefficients = [ [ None for j in range(3) ] for i in range(5) ]
        self.limits = [ [ None for j in range(2) ] for i in range(5) ]
        if self.channelType == HarvesterType_t.PV:
            self.setPVParams()


    def AC_VFalling_ZeroCrossing(self,a, f, c, l, vStart, r, phaseShift):
        oldSolution = 0
        newSolution = 0
        stepSize = 1e-6

        t = stepSize
        oldSolution = self.AC_VFALLING(t, a, f, c, l, vStart, r, phaseShift) > 0
        while (t < self.energiseClocks * CLOCK_PERIOD):
            newSolution = self.AC_VFALLING(t, a, f, c, l, vStart, r, phaseShift) > 0
            if (newSolution != oldSolution):

                self.earlyGroundingFlag = True
                self.energiseEarlyTerminationClock = (t / CLOCK_PERIOD)
                return t

            t = t + stepSize
        return self.energiseClocks * CLOCK_PERIOD

    def AC_VFALLING(self, t, a, f, c, l, vStart, r, phaseShift):
        return (-((l - 4 * c * pow(r, 2)) * cos((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) * ((4 * pow(f, 2) * pow(l, 2) * pow(pi, 2) + pow(1 - 4 * c * pow(f, 2) * l * pow(pi, 2), 2) * pow(r, 2)) * vStart - 4 * a * pow(f, 2) * pow(l, 2) * pow(pi, 2) * sin(phaseShift))) - 2 * a * pow(e, t / (2. * c * r)) * f * l * pi * (l - 4 * c * pow(r, 2)) * sin(phaseShift) * (2 * f * l * pi * cos(2 * f * pi * t) + (-1 + 4 * c * pow(f, 2) * l * pow(pi, 2)) * r * sin(2 * f * pi * t)) + 2 * a * f * l * pi * (l - 4 * c * pow(r, 2)) * cos(phaseShift) * ((1 - 4 * c * pow(f, 2) * l * pow(pi, 2)) * r * cos((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) + pow(e, t / (2. * c * r)) * ((-1 + 4 * c * pow(f, 2) * l * pow(pi, 2)) * r * cos(2 * f * pi * t) - 2 * f * l * pi * sin(2 * f * pi * t))) - pow(r, 2) * sqrt(-(l * (l - 4 * c * pow(r, 2)))) * vStart * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) + 8 * c * pow(f, 2) * l * pow(pi, 2) * pow(r, 2) * sqrt(-(l * (l - 4 * c * pow(r, 2)))) * vStart * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) - 4 * pow(f, 2) * pow(l, 2.5) * pow(pi, 2) * sqrt(-l + 4 * c * pow(r, 2)) * vStart * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) - 16 * pow(c, 2) * pow(f, 4) * pow(l, 2.5) * pow(pi, 4) * pow(r, 2) * sqrt(-l + 4 * c * pow(r, 2)) * vStart * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) - 2 * a * f * l * pi * r * sqrt(-(l * (l - 4 * c * pow(r, 2)))) * cos(phaseShift) * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) - 8 * a * c * pow(f, 3) * pow(l, 2.5) * pow(pi, 3) * r * sqrt(-l + 4 * c * pow(r, 2)) * cos(phaseShift) * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) + 2 * a * pow(r, 2) * sqrt(-(l * (l - 4 * c * pow(r, 2)))) * sin(phaseShift) * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) - 8 * a * c * pow(f, 2) * l * pow(pi, 2) * pow(r, 2) * sqrt(-(l * (l - 4 * c * pow(r, 2)))) * sin(phaseShift) * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) + 4 * a * pow(f, 2) * pow(l, 2.5) * pow(pi, 2) * sqrt(-l + 4 * c * pow(r, 2)) * sin(phaseShift) * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r))) / (pow(e, t / (2. * c * r)) * (-l + 4 * c * pow(r, 2)) * (4 * pow(f, 2) * pow(l, 2) * pow(pi, 2) + pow(1 - 4 * c * pow(f, 2) * l * pow(pi, 2), 2) * pow(r, 2)))

    def AC_VRISING(self, t, a, f, c, vStart, r, phaseShift):
        return (exp(-t / (c * r)) * (vStart - (a * (sin(phaseShift) - 2 * pi * c * f * r * cos(phaseShift))) / (4 * pow(pi, 2) * pow(c, 2) * pow(f, 2) * pow(r, 2) + 1)) + (a * (sin(phaseShift + 2 * pi * f * t) - 2 * c * f * r * pi * cos(phaseShift + 2 * pi * f * t))) / (4 * pow(pi, 2) * pow(c, 2) * pow(f, 2) * pow(r, 2) + 1))

    def PV_CURRENT(self,t, a, b, c, d, vStart):
        return a + (b * cos(c * t)) + (d * vStart * sin(c * t))

    def VFallingWithRSource(self,energiseGearFast, clock):
        actualEnergiseClocks = 0

        if (self.overCurrentFlag or self.earlyGroundingFlag):

            actualEnergiseClocks = self.energiseEarlyTerminationClock

        else:
            actualEnergiseClocks = self.energiseClocks

        if (self.channelType == HarvesterType_t.THEVENIN):

            alpha = 1 / (2 * self.resistance * self.capacitance)
            if(energiseGearFast):

                omegaZero = sqrt(1 / (inductanceFast * self.capacitance))
            else:
                omegaZero = sqrt(1 / (inductanceSlow * self.capacitance))

            omegaD = sqrt(pow(omegaZero, 2) - pow(alpha, 2))
            b1 = self.voltage
            b2 = (((self.vOpenSource - self.voltage) /
                  (self.resistance * self.capacitance)) + alpha * b1) / omegaD

            self.voltage = plantDynamics_class.GeneralFormUnderDampedEquation(
                b1, b2, omegaD, alpha, actualEnergiseClocks * CLOCK_PERIOD)

            self.lastEnergizeEndClock = self.lastEnergizeStartClock + actualEnergiseClocks
            if self.voltage < 0:
                print("ERR NEGATIVE VOLTAGE")

        elif self.channelType == HarvesterType_t.PZ or self.channelType == HarvesterType_t.ED or self.channelType == HarvesterType_t.AC:

            a = self.vOpenSource
            f = self.frequency
            c = self.capacitance
            vStart = self.voltage
            r = self.resistance
            l = inductanceFast if(energiseGearFast) else inductanceSlow
            phaseShift = 0

            phaseShift = plantDynamics_class.f_mod(clock * CLOCK_PERIOD * 2 * pi * f, pi)

            t = actualEnergiseClocks * CLOCK_PERIOD

            self.voltage = self.AC_VFALLING(
                t, a, f, c, l, vStart, r, phaseShift)
            self.lastEnergizeEndClock = self.lastEnergizeStartClock + (t / CLOCK_PERIOD)

        elif self.channelType == HarvesterType_t.PV:

            vStart = self.voltage
            energizeTime = actualEnergiseClocks * CLOCK_PERIOD
            a = self.voltageEquationCoefficients[0]
            b = self.voltageEquationCoefficients[1]
            self.voltage = vStart * cos(a * energizeTime) + b * sin(a * energizeTime)
            self.lastEnergizeEndClock = self.lastEnergizeStartClock + self.energiseClocks

    def InductorCurrentWithRSource(self,energiseGearFast, clock):
        # THEVENIN
        energizeTime = 0
        alpha = 0
        omegaZero = 0
        omegaD = 0
        b1 = 0
        b2 = 0
        # AC SOURCES
        phaseShift = 0
        # PV
        a = 0
        b = 0
        c = 0
        d = 0
        ## 

        l = inductanceFast if (energiseGearFast) else inductanceSlow

        if (self.channelType == HarvesterType_t.THEVENIN):

            alpha = 1 / (2 * self.resistance * self.capacitance)
            if(energiseGearFast):

                omegaZero = sqrt(1 / (inductanceFast * self.capacitance))
            else:
                omegaZero = sqrt(1 / (inductanceSlow * self.capacitance))


            omegaD = sqrt((pow(omegaZero, 2) - pow(alpha, 2)))

            b1 = -self.vOpenSource / self.resistance
            if(energiseGearFast):
                b2 = (((self.voltage) / inductanceFast) + alpha * b1) / omegaD
            else:
                b2 = (((self.voltage) / inductanceSlow) + alpha * b1) / omegaD

            energizeTime = self.energiseClocks * CLOCK_PERIOD
            self.inductorCurrent = plantDynamics_class.GeneralFormUnderDampedEquation(b1, b2, omegaD, alpha, energizeTime) + (self.vOpenSource / self.resistance)

        elif (self.channelType == HarvesterType_t.PZ or self.channelType == HarvesterType_t.ED or self.channelType == HarvesterType_t.AC):

            phaseShift = plantDynamics_class.f_mod(clock * CLOCK_PERIOD * 2 * pi * self.frequency, pi)
            energizeTime = self.AC_VFalling_ZeroCrossing(
                self.vOpenSource, self.frequency, self.capacitance, l, self.voltage, self.resistance, phaseShift)

            self.inductorCurrent = self.AC_CURRENT(
                energizeTime, self.vOpenSource, self.frequency, self.capacitance, l, self.voltage, self.resistance, phaseShift)



        # if (channelType == HarvesterType_t.PV)
        else:
            energizeTime = self.energiseClocks * CLOCK_PERIOD
            a = self.currentEquationCoefficients[0]
            b = self.currentEquationCoefficients[1]
            c = self.currentEquationCoefficients[2]
            d = self.currentEquationCoefficients[3]
            self.inductorCurrent = self.PV_CURRENT(energizeTime, a, b, c, d, self.voltage)

        if(self.inductorCurrent < 0):

            self.inductorCurrent = 0.001
            print("ERR- CURRENT LESS THAN 0!")
            print(self.energiseClocks)
            print(self.periodClocks)

        if (self.inductorCurrent > OVER_CURRENT):

            stepSize = 1e-8
            t = 0
            currentTemp = 0
            while t <= self.energiseClocks * CLOCK_PERIOD:

                t = t + stepSize
                if self.channelType == HarvesterType_t.THEVENIN:

                    currentTemp = plantDynamics_class.GeneralFormUnderDampedEquation(
                        b1, b2, omegaD, alpha, t)
                elif self.channelType == HarvesterType_t.PZ or self.channelType == HarvesterType_t. ED or self.channelType == HarvesterType_t.AC:

                    currentTemp = self.AC_CURRENT(t, self.vOpenSource, self.frequency, self.capacitance, l, self.voltage, self.resistance, phaseShift)
                # (channelType == HarvesterType_t.PV):
                else:
                    currentTemp = self.PV_CURRENT(t, a, b, c, d, self.voltage)

                if currentTemp > OVER_CURRENT:

                    self.inductorCurrent = OVER_CURRENT
                    self.overCurrentFlag = True

                    break

            self.energiseEarlyTerminationClock = (t / CLOCK_PERIOD)

    def VRising(self,clock):
        self.lastEnergizeStartClock = clock
        recoveryTime = (clock - self.lastEnergizeEndClock) * CLOCK_PERIOD
        if (self.channelType == HarvesterType_t.THEVENIN):

            self.voltage += ((self.vOpenSource - self.voltage) * (1 -
                                exp((-recoveryTime / (self.resistance * self.capacitance))))) # voltage of the peak point in the Vin graph

            if(self.voltage<0):
                print("ERR NEGATIVE VOLTAGE Rise")

        elif (self.channelType == HarvesterType_t.PZ or self.channelType == HarvesterType_t.ED or self.channelType == HarvesterType_t.AC):

            a = self.vOpenSource
            f = self.frequency
            c = self.capacitance
            vStart = self.voltage
            r = self.resistance

            self.lastEnergizeEndTime = (
                self.lastEnergizeEndClock * CLOCK_PERIOD)

            phaseShift = plantDynamics_class.f_mod(
                self.lastEnergizeEndTime * f * 2 * pi, pi)

            self.voltage = self.AC_VRISING(
                recoveryTime, a, f, c, vStart, r, phaseShift)
            if (self.voltage < 0):
                self.voltage = -self.voltage

        elif (self.channelType == HarvesterType_t.PV):


            # regions = sizeof(self.odeCoefficients) / sizeof(odeCoefficients[0])
            # Need to check functionality here
            regions = len(self.odeCoefficients)
            startRegion = regions - 1
            vStart = self.voltage
            currentTime = recoveryTime
            # double timeToBoundary
            # double a, b, c;

            for i in range(regions):

                if (vStart >= self.limits[i][0] and vStart < self.limits[i][1]):

                    startRegion = i
                    break


            for i in range(startRegion, regions):

                if (i == regions - 1):
                    a = self.odeCoefficients[i][0]
                    b = self.odeCoefficients[i][1]
                    c = self.odeCoefficients[i][2]
                    self.voltage = a + exp(b * currentTime) * (c + self.voltage)

                else:

                    a = self.timeToNextRegionCoefficients[i][0]
                    b = self.timeToNextRegionCoefficients[i][1]
                    c = self.timeToNextRegionCoefficients[i][2]
                    timeToBoundary = a * log(b + c * self.voltage)

                    if (currentTime <= timeToBoundary):

                        a = self.odeCoefficients[i][0]
                        b = self.odeCoefficients[i][1]
                        c = self.odeCoefficients[i][2]
                        self.voltage = a + exp(b * currentTime) * (c + self.voltage)
                        break

                    else:
                        currentTime -= timeToBoundary
                        self.voltage = self.limits[i][1]

    def AC_CURRENT(self, t, a, f, c, l, vStart, r, currentPhaseShift):
        return -0.5 * (4 * a * pow(e, t / (2. * c * r)) * f * pi * sqrt(-(pow(l, 3) * (l - 4 * c * pow(r, 2)))) * cos(currentPhaseShift + 2 * f * pi * t) - 2 * a * f * pow(l, 1.5) * pi * sqrt(-l + 4 * c * pow(r, 2)) * cos(currentPhaseShift - (sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) - 2 * a * f * pow(l, 1.5) * pi * sqrt(-l + 4 * c * pow(r, 2)) * cos(currentPhaseShift + (sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) + 2 * (-2 * c * r * (4 * pow(f, 2) * pow(l, 2) * pow(pi, 2) + pow(1 - 4 * c * pow(f, 2) * l * pow(pi, 2), 2) * pow(r, 2)) * vStart - 2 * a * f * l * pi * (l + 2 * c * (-1 + 4 * c * pow(f, 2) * l * pow(pi, 2)) * pow(r, 2)) * cos(currentPhaseShift) + a * l * (1 + 4 * c * pow(f, 2) * l * pow(pi, 2)) * r * sin(currentPhaseShift)) * sin((sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) - 2 * a * pow(e, t / (2. * c * r)) * r * sqrt(-(l * (l - 4 * c * pow(r, 2)))) * sin(currentPhaseShift + 2 * f * pi * t) + 8 * a * c * pow(e, t / (2. * c * r)) * pow(f, 2) * pow(pi, 2) * r * sqrt(-(pow(l, 3) * (l - 4 * c * pow(r, 2)))) * sin(currentPhaseShift + 2 * f * pi * t) + a * r * sqrt(-(l * (l - 4 * c * pow(r, 2)))) * sin(currentPhaseShift - (sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) - 4 * a * c * pow(f, 2) * pow(l, 1.5) * pow(pi, 2) * r * sqrt(-l + 4 * c * pow(r, 2)) * sin(currentPhaseShift - (sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) + a * r * sqrt(-(l * (l - 4 * c * pow(r, 2)))) * sin(currentPhaseShift + (sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r)) - 4 * a * c * pow(f, 2) * pow(l, 1.5) * pow(pi, 2) * r * sqrt(-l + 4 * c * pow(r, 2)) * sin(currentPhaseShift + (sqrt(-1 + (4 * c * pow(r, 2)) / l) * t) / (2. * c * r))) / (pow(e, t / (2. * c * r)) * sqrt(-(l * (l - 4 * c * pow(r, 2)))) * (4 * pow(f, 2) * pow(l, 2) * pow(pi, 2) + pow(1 - 4 * c * pow(f, 2) * l * pow(pi, 2), 2) * pow(r, 2)))




        # # private:
        # void Initialise(uint8_t setChannelNumber, uint32_t setTEnergise, uint32_t setTPeriod, HarvesterType_t setHarvesterType,
        #                 double setVoltage, double setCapacitance, double setVOpenSource, double setResistance,
        #                 uint64_t setLastEnergizeEndClock, double setFrequency);


    # a function to run one commutation given the tE and tPeriod
    def runOneCommutation(self, tE, tP, psuVolt, resistance, time=0, volt=0):
        # initializing
        inputVoltage = []
        inputTime = []
        inputCurrent = []

        self.resistance = resistance
        self.vOpenSource = psuVolt
        self.energiseClocks = tE
        self.periodClocks = tP
        self.voltage = volt
        gSimClock = time

        self.VRising(gSimClock)
        vStart = self.voltage
        startTime = gSimClock
        cStart = 0

        self.InductorCurrentWithRSource(0, gSimClock)

        gSimClock += self.energiseClocks

        self.VFallingWithRSource(0, gSimClock)
        cEnd = self.inductorCurrent
        vEnd = self.voltage

        endTime = gSimClock
        gSimClock += (self.periodClocks - self.energiseClocks)

        inputVoltage.extend([vStart, vEnd])
        inputTime.extend([startTime, endTime])
        inputCurrent.extend([cStart, cEnd])

        return inputVoltage, inputCurrent, inputTime, gSimClock

    # a new definition of reaching steady state
    def steadyState(self, oldCurrent):
        deltaCurr = abs(oldCurrent - self.inductorCurrent)
        average = (oldCurrent + self.inductorCurrent) / 2
        return (deltaCurr / average) > 0.002

    def RunToSteadyState(self):

        inputVoltage = []
        inputTime = []
        inputCurrent = []

        gSimClock = 0
        oldCurrent = -10
        counter = 0

        while self.steadyState(oldCurrent) or counter < 10:
            counter +=1
            if(counter>1000):
                print("Never Converged")
                break
            oldCurrent = self.inductorCurrent
            self.VRising(gSimClock)
            inputVoltage.append(self.voltage)
            inputTime.append(gSimClock)
            inputCurrent.append(0)

            self.InductorCurrentWithRSource(0, gSimClock) # get the peak current of Li

            gSimClock += self.energiseClocks

            self.VFallingWithRSource(0, gSimClock) # voltage after energized
            inputCurrent.append(self.inductorCurrent)
            inputVoltage.append(self.voltage)
            inputTime.append(gSimClock) # dashed yellow line

            gSimClock += (self.periodClocks -self.energiseClocks) # goes to the timestamp for the next commutation

            self.overCurrentFlag = False
            self.earlyGroundingFlag = False

        return [inputTime, inputVoltage, inputCurrent]

    def ResetInputs(self):

        self.voltage = self.vOpenSource
        self.earlyGroundingFlag = 0
        self.overCurrentFlag = 0
        self.energiseEarlyTerminationClock = 0
        self.lastEnergizeEndClock = 0
        self.lastEnergizeEndTime = 0
        self.lastEnergizeStartClock = 0

    def ChangeHarvesterType(self, harvesterType: HarvesterType_t, resistance=0, frequency=0, vOpenSource=0, illuminationLevel=0, noOfCells=0):

        if harvesterType == HarvesterType_t.THEVENIN:
            if resistance ==0 or vOpenSource == 0:

                print(f"Error Invalid Set up for Thevenin Harvester tried: \n \
                Resistance:{resistance} | vOpenSource: {vOpenSource}")
            else:
                print(f"Thevenin Harvester Updated: \n \
                Resistance:{resistance} | vOpenSource: {vOpenSource}")
                self.vOpenSource = vOpenSource
                self.resistance = resistance


        elif harvesterType ==  HarvesterType_t.PV:
            self.illuminationLevel = illuminationLevel
            self.noOfCells = noOfCells
            print(f"PV Harvester Updated: \n illumination:{illuminationLevel} | noOfCells: {noOfCells}")
            self.setPVParams()
        else: # AC
            if resistance == 0 or vOpenSource == 0 or frequency == 0:
                print(f"Error Invalid Set up for AC Harvester tried: \n \
                Resistance:{resistance} | vOpenSource: {vOpenSource} | Frequency: {frequency}")
            else:
                print(f"AC Harvester Updated: \n \
                Resistance:{resistance} | vOpenSource: {vOpenSource} | Frequency: {frequency}")
                self.vOpenSource = vOpenSource
                self.resistance = resistance
                self.frequency = frequency

    def setPVParams(self):
        pvIndex = self.noOfCells
        pvIlluminationLevel = self.illuminationLevel

        for k in range(len(self.odeCoefficients)):
            for j in range(len(self.odeCoefficients[0])):
                self.odeCoefficients[k][j] = recoveryPVCoefficients[pvIndex][pvIlluminationLevel][k][j]
                self.timeToNextRegionCoefficients[k][j] = recoveryTimeToNextBoundaryCoefficients[pvIndex][pvIlluminationLevel][k][j]

        # for (k = 0; k < (uint16_t)sizeof(gInputChannels[i].odeCoefficients) / sizeof(gInputChannels[i].odeCoefficients[0]); k++)
        # {
        #     for (uint16_t j = 0; j < (uint16_t)sizeof(gInputChannels[i].odeCoefficients[0]) / 8; j++)
        #     {
        #         gInputChannels[i].odeCoefficients[k][j] = recoveryPVCoefficients[pvIndex][pvIlluminationLevel][k][j];
        #         gInputChannels[i].timeToNextRegionCoefficients[k][j] = recoveryTimeToNextBoundaryCoefficients[pvIndex][pvIlluminationLevel][k][j];
        #     }
        # }

        for k in range(len(self.limits)):
            for j in range(2):
                self.limits[k][j] = recoveryVoltageLimits[pvIndex][pvIlluminationLevel][k][j]

        # for (uint16_t k = 0; k < (uint16_t)sizeof(gInputChannels[i].limits) / sizeof(gInputChannels[i].limits[0]); k++)
        # {
        #     for (int j = 0; j < 2; j++)
        #     {
        #         gInputChannels[i].limits[k][j] = recoveryVoltageLimits[pvIndex][pvIlluminationLevel][k][j];
        #     }
        # }

        for k in range(2):
            self.voltageEquationCoefficients[k] = energizeVoltageEquations[pvIndex][pvIlluminationLevel][k]

        # for (int k = 0; k < 2; k++)
        # {
        #     gInputChannels[i].voltageEquationCoefficients[k] = energizeVoltageEquations[pvIndex][pvIlluminationLevel][k];
        # }
        for k in range(4):
            self.currentEquationCoefficients[k] = energizeCurrentEquations[pvIndex][pvIlluminationLevel][k]


        # for (int k = 0; k < 4; k++)
        # {
        #     gInputChannels[i].currentEquationCoefficients[k] = energizeCurrentEquations[pvIndex][pvIlluminationLevel][k];
        # }

    def ResetInputFlags(self):

        self.overCurrentFlag = False
        self.earlyGroundingFlag = False
        return



class capacitor_class(plantDynamics_class):

    def __init__(self,
        channelNumber,
        voltage,
        capacitance,
        energiseClocks,
        periodClocks,
        eGearFast,
        dGearFast,
        lastEnergizeEndClock,
        loadPeriod,
        loadDutyCycle,
        loadOnCurrent,
        loadOffCurrent,
        loadOnResistance,
        loadOffResistance,
        leakageCurrent,
        leakageResistance
       ):

        plantDynamics_class.__init__(self,
        channelNumber,
        voltage,
        capacitance,
        energiseClocks,
        periodClocks,
        eGearFast,
        dGearFast,
        lastEnergizeEndClock)


        self.deEnergiseClocks = 0
        self.deEnergiseTime = 0
        self.lastCurrentDraw = 0
        self.loadCurrent = 0
        self.loadResistance = loadOffResistance
        self.loadPeriod = loadPeriod
        self.loadDutyCycle = loadDutyCycle
        self.loadOnCurrent = loadOnCurrent
        self.loadOffCurrent = loadOffCurrent
        self.loadOnResistance = loadOnResistance
        self.loadOffResistance = loadOffResistance
        self.leakageCurrent = leakageCurrent
        self.leakageResistance = leakageResistance

    def DeEnergiseTime(self,inductorCurrent, deEnergiseGearFast):
        alpha = 1 / (2 * self.loadResistance * self.capacitance)
        if (deEnergiseGearFast):
            omegaZero = sqrt(1 / (inductanceFast * self.capacitance))
        else:
            omegaZero = sqrt(1 / (inductanceSlow * self.capacitance))


        omegaD = sqrt(pow(omegaZero, 2) - pow(alpha, 2))
        b1 = inductorCurrent
        if deEnergiseGearFast:
            b2 = ((-(self.voltage + 0.001) / inductanceFast) + alpha * b1) / omegaD
        else:
            b2 = ((-(self.voltage + 0.001) / inductanceSlow) + alpha * b1) / omegaD

        self.deEnergiseTime = (plantDynamics_class.f_mod(atan2(-b1, b2), (pi/2)) / omegaD)

        self.deEnergiseClocks = (floor(self.deEnergiseTime / CLOCK_PERIOD))
        if (self.deEnergiseClocks > 0):
            self.deEnergiseClocks += DEENERGISE_OFFSET



        return

    def DeEnergisingCapVoltage(self,inductorCurrent, deEnergiseGearFast):
        alpha = 1 / (2 * self.loadResistance * self.capacitance)
        if(deEnergiseGearFast):

            omegaZero = sqrt(1 / (inductanceFast * self.capacitance))
        else:
            omegaZero = sqrt(1 / (inductanceSlow * self.capacitance))


        omegaD = sqrt(pow(omegaZero, 2) - pow(alpha, 2))
        b1 = self.voltage
        b2 = inductorCurrent / (self.capacitance * omegaD)
        self.voltage = plantDynamics_class.GeneralFormUnderDampedEquation(
            b1, b2, omegaD, alpha, self.deEnergiseTime)

    def CurrentDraw(self,clock, sequencerPhase):

        time = 0
        i = 0

        while (self.lastCurrentDraw < clock):

            i+=1
            time = self.DynamicCapLoading(clock, sequencerPhase)
            self.voltage -= (self.loadCurrent * time) / self.capacitance
            if (self.voltage < 0):

                voltage = 0
                self.lastCurrentDraw = clock

    def DynamicCapLoading(self, clock, sequencerPhase):
        time = 0
        if (plantDynamics_class.f_mod(self.lastCurrentDraw, self.loadPeriod) >= (1 - self.loadDutyCycle) * self.loadPeriod):

            self.loadCurrent = self.loadOnCurrent
            self.loadResistance = self.loadOnResistance
            if (((floor(self.lastCurrentDraw / self.loadPeriod) + 1) * self.loadPeriod) < clock):

                time = (((floor(self.lastCurrentDraw / self.loadPeriod) + 1)
                        * self.loadPeriod) - self.lastCurrentDraw)
                self.lastCurrentDraw += floor(time) + 1
                time = time * CLOCK_PERIOD

            else:

                time = (clock - self.lastCurrentDraw) * CLOCK_PERIOD
                self.lastCurrentDraw = clock


        else:

            self.loadCurrent = self.loadOffCurrent
            self.loadResistance = self.loadOffResistance
            if ((floor(self.lastCurrentDraw / self.loadPeriod) * self.loadPeriod) + (1 - self.loadDutyCycle) * self.loadPeriod < clock):

                time = (((floor(self.lastCurrentDraw / self.loadPeriod) * self.loadPeriod) +
                        (1 - self.loadDutyCycle) * self.loadPeriod) - self.lastCurrentDraw)
                self.lastCurrentDraw += floor(time) + 1
                time = time * CLOCK_PERIOD

            else:

                time = (clock - self.lastCurrentDraw) * CLOCK_PERIOD
                self.lastCurrentDraw = clock


        if (sequencerPhase != 3):

            self.loadCurrent = self.leakageCurrent
            self.loadResistance = self.leakageResistance


        return time

    def DeEnergise_Inductor_Current(self,inductorCurrent, deEnergiseGearFast, time):
        # Function Not Used
        inductorCurrent = inductorCurrent

class capacitor_as_input_class(capacitor_class):

    def __init__(self,
        channelNumber,
        voltage,
        capacitance,
        energiseClocks,
        periodClocks,
        eGearFast,
        dGearFast,
        lastEnergizeEndClock,
        loadPeriod,
        loadDutyCycle,
        loadOnCurrent,
        loadOffCurrent,
        loadOnResistance,
        loadOffResistance,
        leakageCurrent,
        leakageResistance):

        capacitor_class.__init__(self,
        channelNumber,
        voltage,
        capacitance,
        energiseClocks,
        periodClocks,
        eGearFast,
        dGearFast,
        lastEnergizeEndClock,
        loadPeriod,
        loadDutyCycle,
        loadOnCurrent,
        loadOffCurrent,
        loadOnResistance,
        loadOffResistance,
        leakageCurrent,
        leakageResistance)

        self.upperBoundComparator = 0
        self.lowerBoundComparator = 0

    def InductorCurrentWithoutRSource(self,output_tEnergiseClocks, output_energiseGearFast):
        alpha = 0
        if(output_energiseGearFast):

            omegaZero = sqrt(1 / (inductanceFast * self.capacitance))
        else:
            omegaZero = sqrt(1 / (inductanceSlow * self.capacitance))

        omegaD = sqrt(pow(omegaZero, 2) - pow(alpha, 2))
        b1 = 0
        if(output_energiseGearFast):
            b2 = self.voltage / (inductanceFast * omegaD)
        else:
            b2 = self.voltage / (inductanceSlow * omegaD)

        self.inductorCurrent = plantDynamics_class.GeneralFormUnderDampedEquation(
            b1, b2, omegaD, alpha, output_tEnergiseClocks * CLOCK_PERIOD)

    def VFallingWithoutRSource(self,output_tEnergiseClocks, output_energiseGearFast):

            alpha = 0
            if(output_energiseGearFast):

                omegaZero = sqrt(1 / (inductanceFast * self.capacitance))
            else:
                omegaZero = sqrt(1 / (inductanceSlow * self.capacitance))

            omegaD = sqrt(pow(omegaZero, 2) - pow(alpha, 2))
            b1 = self.voltage
            b2 = 0

            voltage = plantDynamics_class.GeneralFormUnderDampedEquation(
                b1, b2, omegaD, alpha, output_tEnergiseClocks * CLOCK_PERIOD)

class capacitor_comparator_class:

    def __init__(self,
        lastEnergizeStartClock,
        energiseClocks,
        periodClocks,
        ):

        self.lastEnergizeStartClock = lastEnergizeStartClock
        self.energiseClocks = energiseClocks
        self.periodClocks = periodClocks
        self.store_comparator_lower = 0
        self.store_comparator_upper = 0
        self.load_comparator = 0
        self.internal_comparator = 0




    def ComparatorCheck(self, storeVoltage, internalVoltage, loadVoltage, storeCapacitor, gSimClock, gSequencerPhase, gStoreComparatorVoltages,gstoreComparatorIndexRegister,gInputSharedRegister):

        storeVoltageInt = storeVoltage*1024
        loadVoltageInt = loadVoltage*1024
        internalVoltageInt = internalVoltage*1024

        self.store_comparator_lower = True if(storeVoltageInt >= storeCapacitor.lowerBoundComparator) else False
        self.store_comparator_upper = True if(storeVoltageInt >= storeCapacitor.upperBoundComparator) else False
        self.load_comparator = True if (loadVoltageInt >= LOAD_COMP) else False
        self.internal_comparator = True if (internalVoltageInt >= INTERNAL_COMP) else False

        self.lastEnergizeStartClock = gSimClock
        gSimClock += self.energiseClocks

        storeCapacitor.upperBoundComparator, storeCapacitor.lowerBoundComparator = UpdateComparators(self, gstoreComparatorIndexRegister, gInputSharedRegister)

        if (gSequencerPhase==0):
            if(self.internal_comparator == True):
                gSequencerPhase = 1
                # SequencerPhaseChange(TYPE_MS_0, TYPE_AUX_OTHER_DEBUG, 1, 0)

        elif(gSequencerPhase == 1):
            if(self.internal_comparator  and self.store_comparator_lower and storeCapacitor.lowerBoundComparator == gStoreComparatorVoltages[STORE_COMP_PHASE_3_TO_PHASE_2_INDEX]):
                gSequencerPhase = 2
                # SequencerPhaseChange(TYPE_MS_0, TYPE_AUX_OTHER_DEBUG, 2, 1)


        elif(gSequencerPhase == 2):
            if(self.store_comparator_upper and  storeCapacitor.upperBoundComparator == gStoreComparatorVoltages[STORE_COMP_PHASE_2_TO_PHASE_3_INDEX]):
                # SequencerPhaseChange(TYPE_MS_0, TYPE_AUX_OTHER_DEBUG, 3, 2)
                gSequencerPhase=3


        elif(gSequencerPhase == 3):
            if ((~self.store_comparator_lower) and (storeCapacitor.lowerBoundComparator == gStoreComparatorVoltages[STORE_COMP_PHASE_3_TO_PHASE_2_INDEX])):

                # SequencerPhaseChange(TYPE_MS_0, TYPE_AUX_OTHER_DEBUG, 2, 3)
                gSequencerPhase=2


        return gSimClock, gSequencerPhase



class storeComparatorIndex_t:

    def __init__(self,
    lowerBoundStoreComparatorIndex,
    upperBoundStoreComparatorIndex):

        self.lowerBoundStoreComparatorIndex = lowerBoundStoreComparatorIndex
        self.upperBoundStoreComparatorIndex = upperBoundStoreComparatorIndex


def UpdateComparators(gSystemComparators, gstoreComparatorIndexRegister, gInputSharedRegister):
    if (gSystemComparators.store_comparator_upper == 1):
        if (gstoreComparatorIndexRegister.upperBoundStoreComparatorIndex == STORE_COMP_PHASE_2_TO_PHASE_3_INDEX):
            gSystemComparators.store_comparator_upper = 1
        else:

            gstoreComparatorIndexRegister.upperBoundStoreComparatorIndex += 1
            gstoreComparatorIndexRegister.lowerBoundStoreComparatorIndex += 1
            gSystemComparators.store_comparator_upper = 0

    elif (gSystemComparators.store_comparator_lower == 0):

        if (gstoreComparatorIndexRegister.lowerBoundStoreComparatorIndex == STORE_COMP_PHASE_3_TO_PHASE_2_INDEX or
                gstoreComparatorIndexRegister.lowerBoundStoreComparatorIndex == 0):

            gSystemComparators.store_comparator_lower = 0

        else:

            gstoreComparatorIndexRegister.upperBoundStoreComparatorIndex -= 1
            gstoreComparatorIndexRegister.lowerBoundStoreComparatorIndex -= 1
            gSystemComparators.store_comparator_lower = 1

    storeComparatorUpperValue = gStoreComparatorVoltages[gstoreComparatorIndexRegister.upperBoundStoreComparatorIndex]
    storeComparatorLowerValue = gStoreComparatorVoltages[gstoreComparatorIndexRegister.lowerBoundStoreComparatorIndex]

    #Update VStore Estimate
    gInputSharedRegister.internalVStoreEstimate = gStoreComparatorVoltages[
        gstoreComparatorIndexRegister.lowerBoundStoreComparatorIndex + 1]
    gInputSharedRegister.inputVStoreEstimate = gstoreComparatorIndexRegister.lowerBoundStoreComparatorIndex

    return storeComparatorUpperValue, storeComparatorLowerValue
